{"ast":null,"code":"import _slicedToArray from \"/projects/lordabbet/react-repo/captivate-common-lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/projects/lordabbet/react-repo/captivate-common-lib/node_modules/react-scripts/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/projects/lordabbet/react-repo/captivate-common-lib/src/common/Tooltip.js\";\nimport React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Tooltip } from '@material-ui/core';\n\nconst arrowGenerator = color => {\n  return {\n    '&[x-placement*=\"bottom\"] $arrow': {\n      'top': 0,\n      'left': 0,\n      'marginTop': '-0.95em',\n      'width': '2em',\n      'height': '1em',\n      '&::before': {\n        borderWidth: '0 1em 1em 1em',\n        borderColor: `transparent transparent ${color} transparent`\n      }\n    },\n    '&[x-placement*=\"top\"] $arrow': {\n      'bottom': 0,\n      'left': 0,\n      'marginBottom': '-0.95em',\n      'width': '2em',\n      'height': '1em',\n      '&::before': {\n        borderWidth: '1em 1em 0 1em',\n        borderColor: `${color} transparent transparent transparent`\n      }\n    },\n    '&[x-placement*=\"right\"] $arrow': {\n      'left': 0,\n      'marginLeft': '-0.95em',\n      'height': '2em',\n      'width': '1em',\n      '&::before': {\n        borderWidth: '1em 1em 1em 0',\n        borderColor: `transparent ${color} transparent transparent`\n      }\n    },\n    '&[x-placement*=\"left\"] $arrow': {\n      'right': 0,\n      'marginRight': '-0.95em',\n      'height': '2em',\n      'width': '1em',\n      '&::before': {\n        borderWidth: '1em 0 1em 1em',\n        borderColor: `transparent transparent transparent ${color}`\n      }\n    }\n  };\n};\n\nconst useStylesArrow = makeStyles(() => ({\n  tooltip: {\n    position: 'relative',\n    backgroundColor: '#FFF',\n    color: '#222222',\n    boxShadow: '0 2px 8px 0 rgba(180, 183, 185, 0.3)',\n    fontSize: 12,\n    fontFamily: 'Arial',\n    padding: 16,\n    fontWeight: 'normal',\n    fontStyle: 'normal',\n    fontStretch: 'normal',\n    letterSpacing: 'normal'\n  },\n  arrow: {\n    'position': 'absolute',\n    'fontSize': 6,\n    '&::before': {\n      content: '\"\"',\n      margin: 'auto',\n      display: 'block',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid'\n    }\n  },\n  popper: arrowGenerator('#c5cacc')\n}));\nexport const ArrowTooltip = props => {\n  const _useStylesArrow = useStylesArrow(),\n        arrow = _useStylesArrow.arrow,\n        classes = _objectWithoutProperties(_useStylesArrow, [\"arrow\"]);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        arrowRef = _useState2[0],\n        setArrowRef = _useState2[1];\n\n  const title = props.title;\n  return React.createElement(Tooltip, Object.assign({\n    classes: classes,\n    placement: \"top\",\n    PopperProps: {\n      popperOptions: {\n        disablePortal: true,\n        modifiers: {\n          arrow: {\n            enabled: Boolean(arrowRef),\n            element: arrowRef\n          }\n        }\n      }\n    },\n    \"data-testid\": \"tooltip\"\n  }, props, {\n    title: React.createElement(React.Fragment, null, title, React.createElement(\"span\", {\n      className: arrow,\n      ref: setArrowRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }));\n};\nexport const LightTooltip = withStyles(theme => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n    minWidth: 240,\n    width: 'auto',\n    height: 80,\n    padding: 16,\n    marginBottom: 10,\n    borderRadius: 5\n  }\n}))(Tooltip);","map":{"version":3,"sources":["/projects/lordabbet/react-repo/captivate-common-lib/src/common/Tooltip.js"],"names":["React","useState","makeStyles","withStyles","Tooltip","arrowGenerator","color","borderWidth","borderColor","useStylesArrow","tooltip","position","backgroundColor","boxShadow","fontSize","fontFamily","padding","fontWeight","fontStyle","fontStretch","letterSpacing","arrow","content","margin","display","width","height","borderStyle","popper","ArrowTooltip","props","classes","arrowRef","setArrowRef","title","popperOptions","disablePortal","modifiers","enabled","Boolean","element","LightTooltip","theme","palette","common","white","shadows","minWidth","marginBottom","borderRadius"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport {Tooltip} from '@material-ui/core';\r\n\r\nconst arrowGenerator = (color) => {\r\n    return {\r\n        '&[x-placement*=\"bottom\"] $arrow': {\r\n            'top': 0,\r\n            'left': 0,\r\n            'marginTop': '-0.95em',\r\n            'width': '2em',\r\n            'height': '1em',\r\n            '&::before': {\r\n                borderWidth: '0 1em 1em 1em',\r\n                borderColor: `transparent transparent ${color} transparent`,\r\n            },\r\n        },\r\n        '&[x-placement*=\"top\"] $arrow': {\r\n            'bottom': 0,\r\n            'left': 0,\r\n            'marginBottom': '-0.95em',\r\n            'width': '2em',\r\n            'height': '1em',\r\n            '&::before': {\r\n                borderWidth: '1em 1em 0 1em',\r\n                borderColor: `${color} transparent transparent transparent`,\r\n            },\r\n        },\r\n        '&[x-placement*=\"right\"] $arrow': {\r\n            'left': 0,\r\n            'marginLeft': '-0.95em',\r\n            'height': '2em',\r\n            'width': '1em',\r\n            '&::before': {\r\n                borderWidth: '1em 1em 1em 0',\r\n                borderColor: `transparent ${color} transparent transparent`,\r\n            },\r\n        },\r\n        '&[x-placement*=\"left\"] $arrow': {\r\n            'right': 0,\r\n            'marginRight': '-0.95em',\r\n            'height': '2em',\r\n            'width': '1em',\r\n            '&::before': {\r\n                borderWidth: '1em 0 1em 1em',\r\n                borderColor: `transparent transparent transparent ${color}`,\r\n            },\r\n        },\r\n    };\r\n};\r\n\r\nconst useStylesArrow = makeStyles(() => ({\r\n    tooltip: {\r\n        position: 'relative',\r\n        backgroundColor: '#FFF',\r\n        color: '#222222',\r\n        boxShadow: '0 2px 8px 0 rgba(180, 183, 185, 0.3)',\r\n        fontSize: 12,\r\n        fontFamily: 'Arial',\r\n        padding: 16,\r\n        fontWeight: 'normal',\r\n        fontStyle: 'normal',\r\n        fontStretch: 'normal',\r\n        letterSpacing: 'normal',\r\n    },\r\n    arrow: {\r\n        'position': 'absolute',\r\n        'fontSize': 6,\r\n        '&::before': {\r\n            content: '\"\"',\r\n            margin: 'auto',\r\n            display: 'block',\r\n            width: 0,\r\n            height: 0,\r\n            borderStyle: 'solid',\r\n        },\r\n    },\r\n    popper: arrowGenerator('#c5cacc'),\r\n}));\r\n\r\nexport const ArrowTooltip = (props) => {\r\n    const {arrow, ...classes} = useStylesArrow();\r\n    const [arrowRef, setArrowRef] = useState(null);\r\n    const {title} = props;\r\n\r\n    return (\r\n        <Tooltip\r\n            classes={classes}\r\n            placement=\"top\"\r\n            PopperProps={{\r\n                popperOptions: {\r\n                    disablePortal: true,\r\n                    modifiers: {\r\n                        arrow: {\r\n                            enabled: Boolean(arrowRef),\r\n                            element: arrowRef,\r\n                        },\r\n                    },\r\n                },\r\n\r\n            }}\r\n            data-testid=\"tooltip\"\r\n            {...props}\r\n            title={\r\n                <>\r\n                    {title}\r\n                    <span className={arrow} ref={setArrowRef} />\r\n                </>\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nexport const LightTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n        backgroundColor: theme.palette.common.white,\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        boxShadow: theme.shadows[1],\r\n        fontSize: 11,\r\n        minWidth: 240,\r\n        width: 'auto',\r\n        height: 80,\r\n        padding: 16,\r\n        marginBottom: 10,\r\n        borderRadius: 5,\r\n    },\r\n}))(Tooltip);\r\n"]},"metadata":{},"sourceType":"module"}